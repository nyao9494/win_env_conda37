{"version":3,"file":"utils.js","sourceRoot":"./@jupyterlab/git/src/","sources":["utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAGhD,mCAAmC;AACnC,MAAM,UAAU,eAAe,CAAC,IAAY;IAC1C,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACjC,OAAO,IAAI,CAAC;KACb;SAAM;QACL,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/B;AACH,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,CAAS,EAAE,CAAS;IAC9C,uBAAuB;IACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;QAC1B,OAAO,WAAW,CAAC;KACpB;SAAM;QACL,oBAAoB;QACpB,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC;SAClD;QACD,kCAAkC;QAClC,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO,UAAU,CAAC;SACnB;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,KAAK,CAAC,EAAU;IAC9B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import { PathExt } from '@jupyterlab/coreutils';\nimport { Git } from './tokens';\n\n/** Get the filename from a path */\nexport function extractFilename(path: string): string {\n  if (path[path.length - 1] === '/') {\n    return path;\n  } else {\n    return PathExt.basename(path);\n  }\n}\n\nexport function decodeStage(x: string, y: string): Git.Status {\n  // If file is untracked\n  if (x === '?' && y === '?') {\n    return 'untracked';\n  } else {\n    // If file is staged\n    if (x !== ' ') {\n      return y !== ' ' ? 'partially-staged' : 'staged';\n    }\n    // If file is unstaged but tracked\n    if (y !== ' ') {\n      return 'unstaged';\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns a promise which resolves after a specified duration.\n *\n * @param ms - duration (in milliseconds)\n * @returns a promise\n */\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"]}