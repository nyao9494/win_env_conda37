{"version":3,"file":"Toolbar.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/Toolbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { PathExt } from '@jupyterlab/coreutils';\nimport {\n  caretDownIcon,\n  caretUpIcon,\n  refreshIcon\n} from '@jupyterlab/ui-components';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Tab, Tabs } from '@material-ui/core';\nimport * as React from 'react';\nimport { classes } from 'typestyle';\nimport { CommandIDs } from '../commandsAndMenu';\nimport { Logger } from '../logger';\nimport {\n  selectedTabClass,\n  tabClass,\n  tabIndicatorClass,\n  tabsClass\n} from '../style/GitPanel';\nimport { branchIcon, desktopIcon, pullIcon, pushIcon } from '../style/icons';\nimport {\n  spacer,\n  toolbarButtonClass,\n  toolbarClass,\n  toolbarMenuButtonClass,\n  toolbarMenuButtonEnabledClass,\n  toolbarMenuButtonIconClass,\n  toolbarMenuButtonSubtitleClass,\n  toolbarMenuButtonTitleClass,\n  toolbarMenuButtonTitleWrapperClass,\n  toolbarMenuWrapperClass,\n  toolbarNavClass\n} from '../style/Toolbar';\nimport { Git, IGitExtension, Level } from '../tokens';\nimport { ActionButton } from './ActionButton';\nimport { BranchMenu } from './BranchMenu';\nimport { TagMenu } from './TagMenu';\n\n/**\n * Interface describing component properties.\n */\nexport interface IToolbarProps {\n  /**\n   * Current list of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Boolean indicating whether branching is disabled.\n   */\n  branching: boolean;\n\n  /**\n   * Jupyter App commands registry\n   */\n  commands: CommandRegistry;\n\n  /**\n   * Current branch name.\n   */\n  currentBranch: string;\n\n  /**\n   * Extension logger\n   */\n  logger: Logger;\n\n  /**\n   * Git extension data model.\n   */\n  model: IGitExtension;\n\n  /**\n   * Current repository.\n   */\n  repository: string;\n\n  /**\n   * Callback to invoke in order to refresh a repository.\n   *\n   * @returns promise which refreshes a repository\n   */\n  refresh: () => Promise<void>;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface IToolbarState {\n  /**\n   * Boolean indicating whether a branch menu is shown.\n   */\n  branchMenu: boolean;\n\n  /**\n   * Panel tab identifier.\n   */\n  tab: number;\n}\n\n/**\n * React component for rendering a panel toolbar.\n */\nexport class Toolbar extends React.Component<IToolbarProps, IToolbarState> {\n  /**\n   * Returns a React component for rendering a panel toolbar.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: IToolbarProps) {\n    super(props);\n\n    this.state = {\n      branchMenu: false,\n      tab: 0\n    };\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <div className={toolbarClass}>\n        {this._renderTopNav()}\n        {this._renderRepoMenu()}\n        {this._renderBranchMenu()}\n      </div>\n    );\n  }\n\n  /**\n   * Renders the top navigation.\n   *\n   * @returns React element\n   */\n  private _renderTopNav(): React.ReactElement {\n    return (\n      <div className={toolbarNavClass}>\n        <span className={spacer} />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={pullIcon}\n          onClick={this._onPullClick}\n          title={'Pull latest changes'}\n        />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={pushIcon}\n          onClick={this._onPushClick}\n          title={'Push committed changes'}\n        />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={refreshIcon}\n          onClick={this._onRefreshClick}\n          title={'Refresh the repository to detect local and remote changes'}\n        />\n      </div>\n    );\n  }\n\n  /**\n   * Renders a repository menu.\n   *\n   * @returns React element\n   */\n  private _renderRepoMenu(): React.ReactElement {\n    return (\n      <div className={toolbarMenuWrapperClass}>\n        <button\n          disabled\n          className={toolbarMenuButtonClass}\n          title={`Current repository: ${this.props.repository}`}\n        >\n          <desktopIcon.react className={toolbarMenuButtonIconClass} />\n          <div className={toolbarMenuButtonTitleWrapperClass}>\n            <p className={toolbarMenuButtonTitleClass}>Current Repository</p>\n            <p className={toolbarMenuButtonSubtitleClass}>\n              {PathExt.basename(this.props.repository)}\n            </p>\n          </div>\n        </button>\n      </div>\n    );\n  }\n\n  /**\n   * Renders a branch menu.\n   *\n   * @returns React element\n   */\n  private _renderBranchMenu(): React.ReactElement | null {\n    if (!this.props.model.pathRepository) {\n      return null;\n    }\n    return (\n      <div className={toolbarMenuWrapperClass}>\n        <button\n          className={classes(\n            toolbarMenuButtonClass,\n            toolbarMenuButtonEnabledClass\n          )}\n          title={'Manage branches and tags'}\n          onClick={this._onBranchClick}\n        >\n          <branchIcon.react className={toolbarMenuButtonIconClass} />\n          <div className={toolbarMenuButtonTitleWrapperClass}>\n            <p className={toolbarMenuButtonTitleClass}>Current Branch</p>\n            <p className={toolbarMenuButtonSubtitleClass}>\n              {this.props.currentBranch || ''}\n            </p>\n          </div>\n          {this.state.branchMenu ? (\n            <caretUpIcon.react className={toolbarMenuButtonIconClass} />\n          ) : (\n            <caretDownIcon.react className={toolbarMenuButtonIconClass} />\n          )}\n        </button>\n        {this.state.branchMenu ? this._renderTabs() : null}\n      </div>\n    );\n  }\n\n  private _renderTabs(): JSX.Element {\n    return (\n      <React.Fragment>\n        <Tabs\n          classes={{\n            root: tabsClass,\n            indicator: tabIndicatorClass\n          }}\n          value={this.state.tab}\n          onChange={(event: any, tab: number): void => {\n            this.setState({\n              tab: tab\n            });\n          }}\n        >\n          <Tab\n            classes={{\n              root: tabClass,\n              selected: selectedTabClass\n            }}\n            title=\"View branches\"\n            label=\"Branches\"\n            disableFocusRipple={true}\n            disableRipple={true}\n          ></Tab>\n          <Tab\n            classes={{\n              root: tabClass,\n              selected: selectedTabClass\n            }}\n            title=\"View tags\"\n            label=\"Tags\"\n            disableFocusRipple={true}\n            disableRipple={true}\n          ></Tab>\n        </Tabs>\n        {this.state.tab === 0 ? this._renderBranches() : this._renderTags()}\n      </React.Fragment>\n    );\n  }\n\n  private _renderBranches(): JSX.Element {\n    return (\n      <BranchMenu\n        currentBranch={this.props.currentBranch || ''}\n        branches={this.props.branches}\n        branching={this.props.branching}\n        logger={this.props.logger}\n        model={this.props.model}\n      />\n    );\n  }\n\n  private _renderTags(): JSX.Element {\n    return (\n      <TagMenu\n        logger={this.props.logger}\n        model={this.props.model}\n        branching={this.props.branching}\n      ></TagMenu>\n    );\n  }\n\n  /**\n   * Callback invoked upon clicking a button to pull the latest changes.\n   *\n   * @param event - event object\n   * @returns a promise which resolves upon pulling the latest changes\n   */\n  private _onPullClick = async (): Promise<void> => {\n    await this.props.commands.execute(CommandIDs.gitPull);\n  };\n\n  /**\n   * Callback invoked upon clicking a button to push the latest changes.\n   *\n   * @param event - event object\n   * @returns a promise which resolves upon pushing the latest changes\n   */\n  private _onPushClick = async (): Promise<void> => {\n    await this.props.commands.execute(CommandIDs.gitPush);\n  };\n\n  /**\n   * Callback invoked upon clicking a button to change the current branch.\n   *\n   * @param event - event object\n   */\n  private _onBranchClick = (): void => {\n    // Toggle the branch menu:\n    this.setState({\n      branchMenu: !this.state.branchMenu\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking a button to refresh a repository.\n   *\n   * @param event - event object\n   * @returns a promise which resolves upon refreshing a repository\n   */\n  private _onRefreshClick = async (): Promise<void> => {\n    this.props.logger.log({\n      level: Level.RUNNING,\n      message: 'Refreshing...'\n    });\n    try {\n      await this.props.refresh();\n\n      this.props.logger.log({\n        level: Level.SUCCESS,\n        message: 'Successfully refreshed.'\n      });\n    } catch (error) {\n      console.error(error);\n      this.props.logger.log({\n        level: Level.ERROR,\n        message: 'Failed to refresh.',\n        error\n      });\n    }\n  };\n}\n"]}