{"version":3,"file":"GitPanel.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/GitPanel.tsx"],"names":[],"mappings":"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","sourcesContent":["import { showDialog } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { FileBrowserModel } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { CommandRegistry } from '@lumino/commands';\nimport { JSONObject } from '@lumino/coreutils';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport * as React from 'react';\nimport { CommandIDs } from '../commandsAndMenu';\nimport { Logger } from '../logger';\nimport { GitExtension } from '../model';\nimport {\n  panelWrapperClass,\n  repoButtonClass,\n  selectedTabClass,\n  tabClass,\n  tabIndicatorClass,\n  tabsClass,\n  warningTextClass\n} from '../style/GitPanel';\nimport { Git, ILogMessage, Level } from '../tokens';\nimport { GitAuthorForm } from '../widgets/AuthorBox';\nimport { CommitBox } from './CommitBox';\nimport { FileList } from './FileList';\nimport { HistorySideBar } from './HistorySideBar';\nimport { Toolbar } from './Toolbar';\n\n/**\n * Interface describing component properties.\n */\nexport interface IGitPanelProps {\n  /**\n   * Jupyter App commands registry\n   */\n  commands: CommandRegistry;\n\n  /**\n   * File browser model.\n   */\n  filebrowser: FileBrowserModel;\n\n  /**\n   * Extension logger\n   */\n  logger: Logger;\n\n  /**\n   * Git extension data model.\n   */\n  model: GitExtension;\n\n  /**\n   * Git extension settings.\n   */\n  settings: ISettingRegistry.ISettings;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface IGitPanelState {\n  /**\n   * Git path repository\n   */\n  repository: string | null;\n\n  /**\n   * List of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Current branch.\n   */\n  currentBranch: string;\n\n  /**\n   * List of changed files.\n   */\n  files: Git.IStatusFile[];\n\n  /**\n   * List of prior commits.\n   */\n  pastCommits: Git.ISingleCommitInfo[];\n\n  /**\n   * Panel tab identifier.\n   */\n  tab: number;\n}\n\n/**\n * React component for rendering a panel for performing Git operations.\n */\nexport class GitPanel extends React.Component<IGitPanelProps, IGitPanelState> {\n  /**\n   * Returns a React component for rendering a panel for performing Git operations.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: IGitPanelProps) {\n    super(props);\n\n    this.state = {\n      branches: [],\n      currentBranch: '',\n      files: [],\n      repository: null,\n      pastCommits: [],\n      tab: 0\n    };\n  }\n\n  /**\n   * Callback invoked immediately after mounting a component (i.e., inserting into a tree).\n   */\n  componentDidMount() {\n    const { model, settings } = this.props;\n\n    model.repositoryChanged.connect((_, args) => {\n      this.setState({\n        repository: args.newValue\n      });\n      this.refresh();\n    }, this);\n    model.statusChanged.connect(() => {\n      this.setState({ files: model.status });\n    }, this);\n    model.headChanged.connect(async () => {\n      await this.refreshBranch();\n      if (this.state.tab === 1) {\n        this.refreshHistory();\n      } else {\n        this.refreshStatus();\n      }\n    }, this);\n    model.markChanged.connect(() => this.forceUpdate());\n\n    settings.changed.connect(this.refresh, this);\n  }\n\n  refreshBranch = async () => {\n    const { currentBranch } = this.props.model;\n\n    this.setState({\n      branches: this.props.model.branches,\n      currentBranch: currentBranch ? currentBranch.name : 'master'\n    });\n  };\n\n  refreshHistory = async () => {\n    if (this.props.model.pathRepository !== null) {\n      // Get git log for current branch\n      const logData = await this.props.model.log(\n        this.props.settings.composite['historyCount'] as number\n      );\n      let pastCommits = new Array<Git.ISingleCommitInfo>();\n      if (logData.code === 0) {\n        pastCommits = logData.commits;\n      }\n\n      this.setState({\n        pastCommits: pastCommits\n      });\n    }\n  };\n\n  refreshStatus = async () => {\n    await this.props.model.refreshStatus();\n  };\n\n  /**\n   * Refresh widget, update all content\n   */\n  refresh = async () => {\n    if (this.props.model.pathRepository !== null) {\n      await this.refreshBranch();\n      await this.refreshHistory();\n      await this.refreshStatus();\n    }\n  };\n\n  /**\n   * Commits all marked files.\n   *\n   * @param message - commit message\n   * @returns a promise which commits the files\n   */\n  commitMarkedFiles = async (message: string): Promise<void> => {\n    this.props.logger.log({\n      level: Level.RUNNING,\n      message: 'Staging files...'\n    });\n    await this.props.model.reset();\n    await this.props.model.add(...this._markedFiles.map(file => file.to));\n\n    await this.commitStagedFiles(message);\n  };\n\n  /**\n   * Commits all staged files.\n   *\n   * @param message - commit message\n   * @returns a promise which commits the files\n   */\n  commitStagedFiles = async (message: string): Promise<void> => {\n    if (!message) {\n      return;\n    }\n\n    const errorLog: ILogMessage = {\n      level: Level.ERROR,\n      message: 'Failed to commit changes.'\n    };\n\n    try {\n      const res = await this._hasIdentity(this.props.model.pathRepository);\n\n      if (!res) {\n        this.props.logger.log(errorLog);\n        return;\n      }\n\n      this.props.logger.log({\n        level: Level.RUNNING,\n        message: 'Committing changes...'\n      });\n\n      await this.props.model.commit(message);\n\n      this.props.logger.log({\n        level: Level.SUCCESS,\n        message: 'Committed changes.'\n      });\n    } catch (error) {\n      console.error(error);\n      this.props.logger.log({ ...errorLog, error });\n    }\n  };\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <div className={panelWrapperClass}>\n        {this.state.repository ? (\n          <React.Fragment>\n            {this._renderToolbar()}\n            {this._renderMain()}\n          </React.Fragment>\n        ) : (\n          this._renderWarning()\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Renders a toolbar.\n   *\n   * @returns React element\n   */\n  private _renderToolbar(): React.ReactElement {\n    const disableBranching = Boolean(\n      this.props.settings.composite['disableBranchWithChanges'] &&\n        (this._hasUnStagedFile() || this._hasStagedFile())\n    );\n    return (\n      <Toolbar\n        currentBranch={this.state.currentBranch}\n        branches={this.state.branches}\n        branching={!disableBranching}\n        commands={this.props.commands}\n        logger={this.props.logger}\n        model={this.props.model}\n        refresh={this._onRefresh}\n        repository={this.state.repository || ''}\n      />\n    );\n  }\n\n  /**\n   * Renders the main panel.\n   *\n   * @returns React element\n   */\n  private _renderMain(): React.ReactElement {\n    return (\n      <React.Fragment>\n        {this._renderTabs()}\n        {this.state.tab === 1 ? this._renderHistory() : this._renderChanges()}\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Renders panel tabs.\n   *\n   * @returns React element\n   */\n  private _renderTabs(): React.ReactElement {\n    return (\n      <Tabs\n        classes={{\n          root: tabsClass,\n          indicator: tabIndicatorClass\n        }}\n        value={this.state.tab}\n        onChange={this._onTabChange}\n      >\n        <Tab\n          classes={{\n            root: tabClass,\n            selected: selectedTabClass\n          }}\n          title=\"View changed files\"\n          label=\"Changes\"\n          disableFocusRipple={true}\n          disableRipple={true}\n        />\n        <Tab\n          classes={{\n            root: tabClass,\n            selected: selectedTabClass\n          }}\n          title=\"View commit history\"\n          label=\"History\"\n          disableFocusRipple={true}\n          disableRipple={true}\n        />\n      </Tabs>\n    );\n  }\n\n  /**\n   * Renders a panel for viewing and committing file changes.\n   *\n   * @returns React element\n   */\n  private _renderChanges(): React.ReactElement {\n    return (\n      <React.Fragment>\n        <FileList\n          files={this._sortedFiles}\n          model={this.props.model}\n          commands={this.props.commands}\n          settings={this.props.settings}\n        />\n        {this.props.settings.composite['simpleStaging'] ? (\n          <CommitBox\n            hasFiles={this._markedFiles.length > 0}\n            onCommit={this.commitMarkedFiles}\n          />\n        ) : (\n          <CommitBox\n            hasFiles={this._hasStagedFile()}\n            onCommit={this.commitStagedFiles}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Renders a panel for viewing commit history.\n   *\n   * @returns React element\n   */\n  private _renderHistory(): React.ReactElement {\n    return (\n      <HistorySideBar\n        branches={this.state.branches}\n        commits={this.state.pastCommits}\n        model={this.props.model}\n        commands={this.props.commands}\n      />\n    );\n  }\n\n  /**\n   * Renders a panel for prompting a user to find a Git repository.\n   *\n   * @returns React element\n   */\n  private _renderWarning(): React.ReactElement {\n    const path = this.props.filebrowser.path;\n    const { commands } = this.props;\n\n    return (\n      <React.Fragment>\n        <div className={warningTextClass}>\n          {path ? (\n            <React.Fragment>\n              <b title={path}>{PathExt.basename(path)}</b> is not\n            </React.Fragment>\n          ) : (\n            'You are not currently in'\n          )}\n          {\n            ' a Git repository. To use Git, navigate to a local repository, initialize a repository here, or clone an existing repository.'\n          }\n        </div>\n        <button\n          className={repoButtonClass}\n          onClick={() => commands.execute('filebrowser:toggle-main')}\n        >\n          Open the FileBrowser\n        </button>\n        <button\n          className={repoButtonClass}\n          onClick={() => commands.execute(CommandIDs.gitInit)}\n        >\n          Initialize a Repository\n        </button>\n        <button\n          className={repoButtonClass}\n          onClick={async () => {\n            await commands.execute(CommandIDs.gitClone);\n            await commands.execute('filebrowser:toggle-main');\n          }}\n        >\n          Clone a Repository\n        </button>\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Callback invoked upon changing the active panel tab.\n   *\n   * @param event - event object\n   * @param tab - tab number\n   */\n  private _onTabChange = (event: any, tab: number): void => {\n    if (tab === 1) {\n      this.refreshHistory();\n    }\n    this.setState({\n      tab: tab\n    });\n  };\n\n  /**\n   * Callback invoked upon refreshing a repository.\n   *\n   * @returns promise which refreshes a repository\n   */\n  private _onRefresh = async () => {\n    await this.refreshBranch();\n    if (this.state.tab === 1) {\n      this.refreshHistory();\n    } else {\n      this.refreshStatus();\n    }\n  };\n\n  /**\n   * Determines whether a user has a known Git identity.\n   *\n   * @param path - repository path\n   * @returns a promise which returns a success status\n   */\n  private async _hasIdentity(path: string): Promise<boolean> {\n    // If the repository path changes, check the user identity\n    if (path !== this._previousRepoPath) {\n      try {\n        const data: JSONObject = (await this.props.model.config()) as any;\n        const options: JSONObject = data['options'] as JSONObject;\n        const keys = Object.keys(options);\n\n        // If the user name or e-mail is unknown, ask the user to set it\n        if (keys.indexOf('user.name') < 0 || keys.indexOf('user.email') < 0) {\n          const result = await showDialog({\n            title: 'Who is committing?',\n            body: new GitAuthorForm()\n          });\n          if (!result.button.accept) {\n            console.log('User refuses to set identity.');\n            return false;\n          }\n          const identity = result.value;\n          try {\n            await this.props.model.config({\n              'user.name': identity.name,\n              'user.email': identity.email\n            });\n          } catch (error) {\n            if (error instanceof Git.GitResponseError) {\n              console.log(error);\n              return false;\n            }\n            throw error;\n          }\n        }\n        this._previousRepoPath = path;\n      } catch (error) {\n        throw new Error('Failed to set your identity. ' + error.message);\n      }\n    }\n    return Promise.resolve(true);\n  }\n\n  private _hasStagedFile(): boolean {\n    return this.state.files.some(\n      file => file.status === 'staged' || file.status === 'partially-staged'\n    );\n  }\n\n  private _hasUnStagedFile(): boolean {\n    return this.state.files.some(\n      file => file.status === 'unstaged' || file.status === 'partially-staged'\n    );\n  }\n\n  /**\n   * List of marked files.\n   */\n  private get _markedFiles(): Git.IStatusFile[] {\n    return this._sortedFiles.filter(file => this.props.model.getMark(file.to));\n  }\n\n  /**\n   * List of sorted modified files.\n   */\n  private get _sortedFiles(): Git.IStatusFile[] {\n    const { files } = this.state;\n\n    files.sort((a, b) => a.to.localeCompare(b.to));\n    return files;\n  }\n\n  private _previousRepoPath: string = null;\n}\n"]}