{"version":3,"file":"model.js","sourceRoot":"./@jupyterlab/git/src/","sources":["model.ts"],"names":[],"mappings":"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","sourcesContent":["import { IChangedArgs, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { JSONObject } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { ISignal, Signal } from '@lumino/signaling';\nimport { requestAPI } from './git';\nimport { TaskHandler } from './taskhandler';\nimport { Git, IGitExtension } from './tokens';\nimport { decodeStage } from './utils';\n\n// Default refresh interval (in milliseconds) for polling the current Git status (NOTE: this value should be the same value as in the plugin settings schema):\nconst DEFAULT_REFRESH_INTERVAL = 3000; // ms\n\n/**\n * Class for creating a model for retrieving info from, and interacting with, a remote Git repository.\n */\nexport class GitExtension implements IGitExtension {\n  /**\n   * Returns an extension model.\n   *\n   * @param app - frontend application\n   * @param settings - plugin settings\n   * @returns extension model\n   */\n  constructor(\n    serverRoot: string,\n    docmanager: IDocumentManager = null,\n    docRegistry: DocumentRegistry = null,\n    settings?: ISettingRegistry.ISettings\n  ) {\n    this._serverRoot = serverRoot;\n    this._docmanager = docmanager;\n    this._docRegistry = docRegistry;\n    this._settings = settings || null;\n    this._taskHandler = new TaskHandler(this);\n\n    let interval: number;\n    if (settings) {\n      interval = settings.composite.refreshInterval as number;\n      settings.changed.connect(onSettingsChange, this);\n    } else {\n      interval = DEFAULT_REFRESH_INTERVAL;\n    }\n    const poll = new Poll({\n      factory: () => this.refresh(),\n      frequency: {\n        interval: interval,\n        backoff: true,\n        max: 300 * 1000\n      },\n      standby: 'when-hidden'\n    });\n    this._poll = poll;\n\n    /**\n     * Callback invoked upon a change to plugin settings.\n     *\n     * @private\n     * @param settings - settings registry\n     */\n    function onSettingsChange(settings: ISettingRegistry.ISettings) {\n      const freq = poll.frequency;\n      poll.frequency = {\n        interval: settings.composite.refreshInterval as number,\n        backoff: freq.backoff,\n        max: freq.max\n      };\n    }\n  }\n\n  /**\n   * Branch list for the current repository.\n   */\n  get branches() {\n    return this._branches;\n  }\n\n  /**\n   * The current repository branch.\n   */\n  get currentBranch() {\n    return this._currentBranch;\n  }\n\n  /**\n   * Boolean indicating whether the model has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Boolean indicating whether the model is ready.\n   */\n  get isReady(): boolean {\n    return this._pendingReadyPromise === 0;\n  }\n\n  /**\n   * Promise which fulfills when the model is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Git repository path.\n   *\n   * ## Notes\n   *\n   * -   This is the full path of the top-level folder.\n   * -   The return value is `null` if a repository path is not defined.\n   */\n  get pathRepository(): string | null {\n    return this._pathRepository;\n  }\n\n  set pathRepository(v: string | null) {\n    const change: IChangedArgs<string> = {\n      name: 'pathRepository',\n      newValue: null,\n      oldValue: this._pathRepository\n    };\n    if (v === null) {\n      this._pendingReadyPromise += 1;\n      this._readyPromise.then(() => {\n        this._pathRepository = null;\n        this._pendingReadyPromise -= 1;\n\n        if (change.newValue !== change.oldValue) {\n          this.refresh().then(() => this._repositoryChanged.emit(change));\n        }\n      });\n    } else {\n      const currentReady = this._readyPromise;\n      this._pendingReadyPromise += 1;\n      this._readyPromise = Promise.all([currentReady, this.showTopLevel(v)])\n        .then(r => {\n          const results = r[1];\n          if (results.code === 0) {\n            this._pathRepository = results.top_repo_path;\n            change.newValue = results.top_repo_path;\n          } else {\n            this._pathRepository = null;\n          }\n\n          if (change.newValue !== change.oldValue) {\n            this.refresh().then(() => this._repositoryChanged.emit(change));\n          }\n        })\n        .catch(reason => {\n          console.error(`Fail to find Git top level for path ${v}.\\n${reason}`);\n        });\n\n      void this._readyPromise.then(() => {\n        this._pendingReadyPromise -= 1;\n      });\n    }\n  }\n\n  /**\n   * A list of modified files.\n   *\n   * ## Notes\n   *\n   * -   The file list corresponds to the list of files from `git status`.\n   */\n  get status(): Git.IStatusFile[] {\n    return this._status;\n  }\n\n  /**\n   * A signal emitted when the `HEAD` of the Git repository changes.\n   */\n  get headChanged(): ISignal<IGitExtension, void> {\n    return this._headChanged;\n  }\n\n  /**\n   * A signal emitted when the current marking of the Git repository changes.\n   */\n  get markChanged(): ISignal<IGitExtension, void> {\n    return this._markChanged;\n  }\n\n  /**\n   * A signal emitted when the current Git repository changes.\n   */\n  get repositoryChanged(): ISignal<IGitExtension, IChangedArgs<string | null>> {\n    return this._repositoryChanged;\n  }\n\n  /**\n   * A signal emitted when the current status of the Git repository changes.\n   */\n  get statusChanged(): ISignal<IGitExtension, Git.IStatusFile[]> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted whenever a model event occurs.\n   */\n  get taskChanged(): ISignal<IGitExtension, string> {\n    return this._taskHandler.taskChanged;\n  }\n\n  /**\n   * Add one or more files to the repository staging area.\n   *\n   * ## Notes\n   *\n   * -   If no filename is provided, all files are added.\n   *\n   * @param filename - files to add\n   * @returns promise which resolves upon adding files to the repository staging area\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async add(...filename: string[]): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>('git:add:files', async () => {\n      await requestAPI<void>('add', 'POST', {\n        add_all: !filename,\n        filename: filename || '',\n        top_repo_path: path\n      });\n    });\n    await this.refreshStatus();\n  }\n\n  /**\n   * Add all \"unstaged\" files to the repository staging area.\n   *\n   * @returns promise which resolves upon adding files to the repository staging area\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async addAllUnstaged(): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>(\n      'git:add:files:all_unstaged',\n      async () => {\n        await requestAPI<void>('add_all_unstaged', 'POST', {\n          top_repo_path: path\n        });\n      }\n    );\n    await this.refreshStatus();\n  }\n\n  /**\n   * Add all untracked files to the repository staging area.\n   *\n   * @returns promise which resolves upon adding files to the repository staging area\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async addAllUntracked(): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>(\n      'git:add:files:all_untracked',\n      async () => {\n        await requestAPI<void>('add_all_untracked', 'POST', {\n          top_repo_path: path\n        });\n      }\n    );\n    await this.refreshStatus();\n  }\n\n  /**\n   * Add a remote Git repository to the current repository.\n   *\n   * @param url - remote repository URL\n   * @param name - remote name\n   * @returns promise which resolves upon adding a remote\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async addRemote(url: string, name?: string): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>('git:add:remote', async () => {\n      await requestAPI<void>('remote/add', 'POST', {\n        top_repo_path: path,\n        url,\n        name\n      });\n    });\n  }\n\n  /**\n   * Retrieve the repository commit log.\n   *\n   * ## Notes\n   *\n   * -  This API can be used to implicitly check if the current folder is a Git repository.\n   *\n   * @param count - number of commits to retrieve\n   * @returns promise which resolves upon retrieving the repository commit log\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async allHistory(count = 25): Promise<Git.IAllHistory> {\n    const path = await this._getPathRespository();\n    return await this._taskHandler.execute<Git.IAllHistory>(\n      'git:fetch:history',\n      async () => {\n        return await requestAPI<Git.IAllHistory>('all_history', 'POST', {\n          current_path: path,\n          history_count: count\n        });\n      }\n    );\n  }\n\n  /**\n   * Checkout a branch.\n   *\n   * ## Notes\n   *\n   * -   If a branch name is provided, checkout the provided branch (with or without creating it)\n   * -   If a filename is provided, checkout the file, discarding all changes.\n   * -   If nothing is provided, checkout all files, discarding all changes.\n   *\n   * TODO: Refactor into separate endpoints for each kind of checkout request\n   *\n   * @param options - checkout options\n   * @returns promise which resolves upon performing a checkout\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async checkout(options?: Git.ICheckoutOptions): Promise<Git.ICheckoutResult> {\n    const path = await this._getPathRespository();\n\n    const body = {\n      checkout_branch: false,\n      new_check: false,\n      branchname: '',\n      startpoint: '',\n      checkout_all: true,\n      filename: '',\n      top_repo_path: path\n    };\n\n    if (options !== undefined) {\n      if (options.branchname) {\n        body.branchname = options.branchname;\n        body.checkout_branch = true;\n        body.new_check = options.newBranch === true;\n        if (options.newBranch) {\n          body.startpoint = options.startpoint || this._currentBranch.name;\n        }\n      } else if (options.filename) {\n        body.filename = options.filename;\n        body.checkout_all = false;\n      }\n    }\n\n    const data = await this._taskHandler.execute<Git.ICheckoutResult>(\n      'git:checkout',\n      async () => {\n        const d = await requestAPI<Git.ICheckoutResult>(\n          'checkout',\n          'POST',\n          body\n        );\n\n        if (body.checkout_branch) {\n          const changes = await this._changedFiles(\n            this._currentBranch.name,\n            body.branchname\n          );\n          changes.files?.forEach(file => this._revertFile(file));\n        } else {\n          this._revertFile(options.filename);\n        }\n        return d;\n      }\n    );\n\n    if (body.checkout_branch) {\n      await this.refreshBranch();\n      this._headChanged.emit();\n    } else {\n      await this.refreshStatus();\n    }\n    return data;\n  }\n\n  /**\n   * Clone a repository.\n   *\n   * @param path - local path into which the repository will be cloned\n   * @param url - Git repository URL\n   * @param auth - remote repository authentication information\n   * @returns promise which resolves upon cloning a repository\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async clone(\n    path: string,\n    url: string,\n    auth?: Git.IAuth\n  ): Promise<Git.ICloneResult> {\n    return await this._taskHandler.execute<Git.ICloneResult>(\n      'git:clone',\n      async () => {\n        return await requestAPI<Git.ICloneResult>('clone', 'POST', {\n          current_path: path,\n          clone_url: url,\n          auth: auth as any\n        });\n      }\n    );\n  }\n\n  /**\n   * Commit all staged file changes.\n   *\n   * @param message - commit message\n   * @returns promise which resolves upon committing file changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async commit(message: string): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute('git:commit:create', async () => {\n      await requestAPI('commit', 'POST', {\n        commit_msg: message,\n        top_repo_path: path\n      });\n    });\n    await this.refreshStatus();\n    this._headChanged.emit();\n  }\n\n  /**\n   * Get (or set) Git configuration options.\n   *\n   * @param options - configuration options to set\n   * @returns promise which resolves upon either getting or setting configuration options\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async config(options?: JSONObject): Promise<JSONObject | void> {\n    const path = await this._getPathRespository();\n    return await this._taskHandler.execute<JSONObject | void>(\n      'git:config:' + (options ? 'set' : 'get'),\n      async () => {\n        if (options) {\n          await requestAPI('config', 'POST', {\n            path,\n            options\n          });\n        } else {\n          return await requestAPI<JSONObject>('config', 'POST', { path });\n        }\n      }\n    );\n  }\n\n  /**\n   * Dispose of model resources.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._poll.dispose();\n    Signal.clearData(this);\n  }\n\n  /**\n   * Fetch commit information.\n   *\n   * @param hash - commit hash\n   * @returns promise which resolves upon retrieving commit information\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async detailedLog(hash: string): Promise<Git.ISingleCommitFilePathInfo> {\n    const path = await this._getPathRespository();\n    const data = await this._taskHandler.execute<Git.ISingleCommitFilePathInfo>(\n      'git:fetch:commit_log',\n      async () => {\n        return await requestAPI<Git.ISingleCommitFilePathInfo>(\n          'detailed_log',\n          'POST',\n          {\n            selected_hash: hash,\n            current_path: path\n          }\n        );\n      }\n    );\n\n    data.modified_files = data.modified_files.map(f => {\n      f.type = this._resolveFileType(f.modified_file_path);\n      return f;\n    });\n    return data;\n  }\n\n  /**\n   * Ensure a .gitignore file exists\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async ensureGitignore(): Promise<void> {\n    const path = await this._getPathRespository();\n\n    await requestAPI('ignore', 'POST', {\n      top_repo_path: path\n    });\n    this._openGitignore();\n    await this.refreshStatus();\n  }\n\n  /**\n   * Return the path of a file relative to the Jupyter server root.\n   *\n   * ## Notes\n   *\n   * -   If no path is provided, returns the Git repository top folder relative path.\n   * -   If no Git repository selected, returns `null`\n   *\n   * @param path - file path relative to the top folder of the Git repository\n   * @returns relative path\n   */\n  getRelativeFilePath(path?: string): string | null {\n    if (this.pathRepository === null || this._serverRoot === void 0) {\n      return null;\n    }\n    return PathExt.join(\n      PathExt.relative(this._serverRoot, this.pathRepository),\n      path || ''\n    );\n  }\n\n  /**\n   * Add an entry in .gitignore file\n   *\n   * @param filePath File to ignore\n   * @param useExtension Whether to ignore the file or its extension\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async ignore(filePath: string, useExtension: boolean): Promise<void> {\n    const path = await this._getPathRespository();\n\n    await requestAPI('ignore', 'POST', {\n      top_repo_path: path,\n      file_path: filePath,\n      use_extension: useExtension\n    });\n\n    this._openGitignore();\n    await this.refreshStatus();\n  }\n\n  /**\n   * Initialize a new Git repository at a specified path.\n   *\n   * @param path - path at which initialize a Git repository\n   * @returns promise which resolves upon initializing a Git repository\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async init(path: string): Promise<void> {\n    await this._taskHandler.execute<void>('git:init', async () => {\n      await requestAPI('init', 'POST', {\n        current_path: path\n      });\n    });\n  }\n\n  /**\n   * Retrieve commit logs.\n   *\n   * @param count - number of commits\n   * @returns promise which resolves upon retrieving commit logs\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async log(count = 25): Promise<Git.ILogResult> {\n    const path = await this._getPathRespository();\n    return await this._taskHandler.execute<Git.ILogResult>(\n      'git:fetch:log',\n      async () => {\n        return await requestAPI<Git.ILogResult>('log', 'POST', {\n          current_path: path,\n          history_count: count\n        });\n      }\n    );\n  }\n\n  /**\n   * Fetch changes from a remote repository.\n   *\n   * @param auth - remote authentication information\n   * @returns promise which resolves upon fetching changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async pull(auth?: Git.IAuth): Promise<Git.IPushPullResult> {\n    const path = await this._getPathRespository();\n    const data = this._taskHandler.execute<Git.IPushPullResult>(\n      'git:pull',\n      async () => {\n        return await requestAPI<Git.IPushPullResult>('pull', 'POST', {\n          current_path: path,\n          auth: auth as any,\n          cancel_on_conflict:\n            (this._settings?.composite['cancelPullMergeConflict'] as boolean) ||\n            false\n        });\n      }\n    );\n    this._headChanged.emit();\n    return data;\n  }\n\n  /**\n   * Push local changes to a remote repository.\n   *\n   * @param auth - remote authentication information\n   * @returns promise which resolves upon pushing changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async push(auth?: Git.IAuth): Promise<Git.IPushPullResult> {\n    const path = await this._getPathRespository();\n    const data = this._taskHandler.execute<Git.IPushPullResult>(\n      'git:push',\n      async () => {\n        return await requestAPI<Git.IPushPullResult>('push', 'POST', {\n          current_path: path,\n          auth: auth as any\n        });\n      }\n    );\n    this._headChanged.emit();\n    return data;\n  }\n\n  /**\n   * Refresh the repository.\n   *\n   * @returns promise which resolves upon refreshing the repository\n   */\n  async refresh(): Promise<void> {\n    await this._taskHandler.execute<void>('git:refresh', async () => {\n      await this.refreshBranch();\n      await this.refreshStatus();\n    });\n  }\n\n  /**\n   * Refresh the list of repository branches.\n   *\n   * @returns promise which resolves upon refreshing repository branches\n   */\n  async refreshBranch(): Promise<void> {\n    try {\n      const data = await this._taskHandler.execute<Git.IBranchResult>(\n        'git:refresh:branches',\n        async () => {\n          return await this._branch();\n        }\n      );\n\n      const headChanged = this._currentBranch !== data.current_branch;\n      this._branches = data.branches;\n      this._currentBranch = data.current_branch;\n      if (this._currentBranch) {\n        // Set up the marker obj for the current (valid) repo/branch combination\n        this._setMarker(this.pathRepository, this._currentBranch.name);\n      }\n\n      if (headChanged) {\n        this._headChanged.emit();\n      }\n    } catch (error) {\n      const headChanged = this._currentBranch !== null;\n      this._branches = [];\n      this._currentBranch = null;\n      if (headChanged) {\n        this._headChanged.emit();\n      }\n\n      if (!(error instanceof Git.NotInRepository)) {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Refresh the repository status.\n   *\n   * @returns promise which resolves upon refreshing the repository status\n   */\n  async refreshStatus(): Promise<void> {\n    let path: string;\n    try {\n      path = await this._getPathRespository();\n    } catch (error) {\n      this._setStatus([]);\n      if (!(error instanceof Git.NotInRepository)) {\n        throw error;\n      }\n      return;\n    }\n\n    try {\n      const data = await this._taskHandler.execute<Git.IStatusResult>(\n        'git:refresh:status',\n        async () => {\n          return await requestAPI<Git.IStatusResult>('status', 'POST', {\n            current_path: path\n          });\n        }\n      );\n\n      this._setStatus(\n        data.files.map(file => {\n          return {\n            ...file,\n            status: decodeStage(file.x, file.y),\n            type: this._resolveFileType(file.to)\n          };\n        })\n      );\n    } catch (err) {\n      // TODO we should notify the user\n      this._setStatus([]);\n      console.error(err);\n      return;\n    }\n  }\n\n  /**\n   * Move files from the \"staged\" to the \"unstaged\" area.\n   *\n   * ## Notes\n   *\n   * -  If no filename is provided, moves all files from the \"staged\" to the \"unstaged\" area.\n   *\n   * @param filename - file path to be reset\n   * @returns promise which resolves upon moving files\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async reset(filename?: string): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>('git:reset:changes', async () => {\n      const reset_all = filename === undefined;\n      let files: string[];\n      if (reset_all) {\n        files = (await this._changedFiles('INDEX', 'HEAD')).files;\n      } else {\n        files = [filename];\n      }\n      await requestAPI('reset', 'POST', {\n        reset_all: filename === undefined,\n        filename: filename === undefined ? null : filename,\n        top_repo_path: path\n      });\n\n      files.forEach(file => {\n        this._revertFile(file);\n      });\n    });\n    await this.refreshStatus();\n  }\n\n  /**\n   * Reset the repository to a specified commit.\n   *\n   * ## Notes\n   *\n   * -   If a commit hash is not provided, resets the repository to `HEAD`.\n   *\n   * @param hash - commit identifier (hash)\n   * @returns promises which resolves upon resetting the repository\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async resetToCommit(hash = ''): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>('git:reset:hard', async () => {\n      const files = (await this._changedFiles(null, null, hash)).files;\n\n      await requestAPI('reset_to_commit', 'POST', {\n        commit_id: hash,\n        top_repo_path: path\n      });\n\n      files?.forEach(file => {\n        this._revertFile(file);\n      });\n    });\n    await this.refreshBranch();\n    this._headChanged.emit();\n  }\n\n  /**\n   * Retrieve the prefix path of a directory `path` with respect to the root repository directory.\n   *\n   * @param path - directory path\n   * @returns promise which resolves upon retrieving the prefix path\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async showPrefix(path: string): Promise<Git.IShowPrefixResult> {\n    return await this._taskHandler.execute<Git.IShowPrefixResult>(\n      'git:fetch:prefix_path',\n      async () => {\n        return await requestAPI<Git.IShowPrefixResult>('show_prefix', 'POST', {\n          current_path: path\n        });\n      }\n    );\n  }\n\n  /**\n   * Retrieve the top level repository path.\n   *\n   * @param path - current path\n   * @returns promise which resolves upon retrieving the top level repository path\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async showTopLevel(path: string): Promise<Git.IShowTopLevelResult> {\n    return await this._taskHandler.execute<Git.IShowTopLevelResult>(\n      'git:fetch:top_level_path',\n      async () => {\n        return await requestAPI<Git.IShowTopLevelResult>(\n          'show_top_level',\n          'POST',\n          {\n            current_path: path\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Retrieve the list of tags in the repository.\n   *\n   * @returns promise which resolves upon retrieving the tag list\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async tags(): Promise<Git.ITagResult> {\n    const path = await this._getPathRespository();\n    return await this._taskHandler.execute<Git.ITagResult>(\n      'git:tag:list',\n      async () => {\n        return await requestAPI<Git.ITagResult>('tags', 'POST', {\n          current_path: path\n        });\n      }\n    );\n  }\n\n  /**\n   * Checkout the specified tag version\n   *\n   * @param tag - selected tag version\n   * @returns promise which resolves upon checking out the tag version of the repository\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async checkoutTag(tag: string): Promise<Git.ICheckoutResult> {\n    const path = await this._getPathRespository();\n    return await this._taskHandler.execute<Git.ICheckoutResult>(\n      'git:tag:checkout',\n      async () => {\n        return await requestAPI<Git.ICheckoutResult>('tag_checkout', 'POST', {\n          current_path: path,\n          tag_id: tag\n        });\n      }\n    );\n  }\n\n  /**\n   * Add a file to the current marker object.\n   *\n   * @param fname - filename\n   * @param mark - mark to set\n   */\n  addMark(fname: string, mark: boolean) {\n    this._currentMarker.add(fname, mark);\n  }\n\n  /**\n   * Return the current mark associated with a specified filename.\n   *\n   * @param fname - filename\n   * @returns mark\n   */\n  getMark(fname: string): boolean {\n    return this._currentMarker.get(fname);\n  }\n\n  /**\n   * Toggle the mark for a file in the current marker object\n   *\n   * @param fname - filename\n   */\n  toggleMark(fname: string) {\n    this._currentMarker.toggle(fname);\n  }\n\n  /**\n   * Register a new diff provider for specified file types\n   *\n   * @param filetypes File type list\n   * @param callback Callback to use for the provided file types\n   */\n  registerDiffProvider(filetypes: string[], callback: Git.IDiffCallback): void {\n    filetypes.forEach(fileType => {\n      this._diffProviders[fileType] = callback;\n    });\n  }\n\n  /**\n   * Revert changes made after a specified commit.\n   *\n   * @param message - commit message\n   * @param hash - commit identifier (hash)\n   * @returns promise which resolves upon reverting changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async revertCommit(message: string, hash: string): Promise<void> {\n    const path = await this._getPathRespository();\n    await this._taskHandler.execute<void>('git:commit:revert', async () => {\n      const files = (await this._changedFiles(null, null, hash + '^!')).files;\n\n      await requestAPI('delete_commit', 'POST', {\n        commit_id: hash,\n        top_repo_path: path\n      });\n\n      files?.forEach(file => {\n        this._revertFile(file);\n      });\n    });\n    await this.commit(message);\n  }\n\n  /**\n   * Make request for a list of all git branches in the repository\n   * Retrieve a list of repository branches.\n   *\n   * @returns promise which resolves upon fetching repository branches\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  protected async _branch(): Promise<Git.IBranchResult> {\n    const path = await this._getPathRespository();\n    return await this._taskHandler.execute<Git.IBranchResult>(\n      'git:fetch:branches',\n      async () => {\n        return await requestAPI<Git.IBranchResult>('branch', 'POST', {\n          current_path: path\n        });\n      }\n    );\n  }\n\n  /**\n   * Get list of files changed between two commits or two branches.\n   *\n   * Notes:\n   *   It assumes the Git path repository as already been checked.\n   *\n   * @param base id of base commit or base branch for comparison\n   * @param remote id of remote commit or remote branch for comparison\n   * @param singleCommit id of a single commit\n   *\n   * @returns the names of the changed files\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  protected async _changedFiles(\n    base?: string,\n    remote?: string,\n    singleCommit?: string\n  ): Promise<Git.IChangedFilesResult> {\n    return await requestAPI<Git.IChangedFilesResult>('changed_files', 'POST', {\n      current_path: this.pathRepository,\n      base: base,\n      remote: remote,\n      single_commit: singleCommit\n    });\n  }\n\n  /**\n   * Get the current Git repository path\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   */\n  protected async _getPathRespository(): Promise<string> {\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      throw new Git.NotInRepository();\n    }\n    return path;\n  }\n\n  /**\n   * Resolve path to filetype\n   */\n  protected _resolveFileType(path: string): DocumentRegistry.IFileType {\n    // test if directory\n    if (path.endsWith('/')) {\n      return DocumentRegistry.defaultDirectoryFileType;\n    }\n\n    return (\n      this._docRegistry.getFileTypesForPath(path)[0] ||\n      DocumentRegistry.defaultTextFileType\n    );\n  }\n\n  /**\n   * Set the repository status.\n   *\n   * @param v - repository status\n   */\n  protected _setStatus(v: Git.IStatusFile[]) {\n    this._status = v;\n    this._statusChanged.emit(this._status);\n  }\n\n  /**\n   * open new editor or show an existing editor of the\n   * .gitignore file. If the editor does not have unsaved changes\n   * then ensure the editor's content matches the file on disk\n   */\n  private _openGitignore() {\n    if (this._docmanager) {\n      const widget = this._docmanager.openOrReveal(\n        this.getRelativeFilePath('.gitignore')\n      );\n      if (widget && !widget.context.model.dirty) {\n        widget.context.revert();\n      }\n    }\n  }\n\n  /**\n   * if file is open in JupyterLab find the widget and ensure the JupyterLab\n   * version matches the version on disk. Do nothing if the file has unsaved changes\n   *\n   * @param path path to the file to be reverted\n   */\n  private _revertFile(path: string): void {\n    const widget = this._docmanager.findWidget(this.getRelativeFilePath(path));\n    if (widget && !widget.context.model.dirty) {\n      widget.context.revert();\n    }\n  }\n\n  /**\n   * Set the marker object for a repository path and branch.\n   *\n   * @returns branch marker\n   */\n  private _setMarker(path: string, branch: string): BranchMarker {\n    this._currentMarker = this._markerCache.get(path, branch);\n    return this._currentMarker;\n  }\n\n  private _status: Git.IStatusFile[] = [];\n  private _pathRepository: string | null = null;\n  private _branches: Git.IBranch[];\n  private _currentBranch: Git.IBranch;\n  private _serverRoot: string;\n  private _docmanager: IDocumentManager | null;\n  private _docRegistry: DocumentRegistry | null;\n  private _diffProviders: { [key: string]: Git.IDiffCallback } = {};\n  private _isDisposed = false;\n  private _markerCache: Markers = new Markers(() => this._markChanged.emit());\n  private _currentMarker: BranchMarker = null;\n  private _readyPromise: Promise<void> = Promise.resolve();\n  private _pendingReadyPromise = 0;\n  private _poll: Poll;\n  private _settings: ISettingRegistry.ISettings | null;\n  private _taskHandler: TaskHandler<IGitExtension>;\n\n  private _headChanged = new Signal<IGitExtension, void>(this);\n  private _markChanged = new Signal<IGitExtension, void>(this);\n  private _repositoryChanged = new Signal<\n    IGitExtension,\n    IChangedArgs<string | null>\n  >(this);\n  private _statusChanged = new Signal<IGitExtension, Git.IStatusFile[]>(this);\n}\n\nexport class BranchMarker implements Git.IBranchMarker {\n  constructor(private _refresh: () => void) {}\n\n  add(fname: string, mark = true) {\n    if (!(fname in this._marks)) {\n      this.set(fname, mark);\n    }\n  }\n\n  get(fname: string) {\n    return this._marks[fname];\n  }\n\n  set(fname: string, mark: boolean) {\n    this._marks[fname] = mark;\n    this._refresh();\n  }\n\n  toggle(fname: string) {\n    this.set(fname, !this._marks[fname]);\n  }\n\n  private _marks: { [key: string]: boolean } = {};\n}\n\nexport class Markers {\n  constructor(private _refresh: () => void) {}\n\n  get(path: string, branch: string): BranchMarker {\n    const key = Markers.markerKey(path, branch);\n    if (key in this._branchMarkers) {\n      return this._branchMarkers[key];\n    }\n\n    const marker = new BranchMarker(this._refresh);\n    this._branchMarkers[key] = marker;\n    return marker;\n  }\n\n  static markerKey(path: string, branch: string): string {\n    return [path, branch].join(':');\n  }\n\n  private _branchMarkers: { [key: string]: BranchMarker } = {};\n}\n"]}