diff -Naur rtree-f5ee10617b84a681cb69e7a921aa1b1113d8debd.orig/rtree/core.py rtree-f5ee10617b84a681cb69e7a921aa1b1113d8debd/rtree/core.py
--- rtree-f5ee10617b84a681cb69e7a921aa1b1113d8debd.orig/rtree/core.py	2016-10-16 01:12:17.000000000 -0300
+++ rtree-f5ee10617b84a681cb69e7a921aa1b1113d8debd/rtree/core.py	2016-10-17 07:33:05.269129899 -0300
@@ -1,4 +1,5 @@
 import os
+import sys
 import ctypes
 from ctypes.util import find_library
 
@@ -71,55 +72,16 @@
 
 
 if os.name == 'nt':
-
-    def _load_library(dllname, loadfunction, dllpaths=('', )):
-        """Load a DLL via ctypes load function. Return None on failure.
-
-        Try loading the DLL from the current package directory first,
-        then from the Windows DLL search path.
-
-        """
-        try:
-            dllpaths = (os.path.abspath(os.path.dirname(__file__)),
-                        ) + dllpaths
-        except NameError:
-            pass  # no __file__ attribute on PyPy and some frozen distributions
-        for path in dllpaths:
-            if path:
-                # temporarily add the path to the PATH environment variable
-                # so Windows can find additional DLL dependencies.
-                try:
-                    oldenv = os.environ['PATH']
-                    os.environ['PATH'] = path + ';' + oldenv
-                except KeyError:
-                    oldenv = None
-            try:
-                return loadfunction(os.path.join(path, dllname))
-            except (WindowsError, OSError):
-                pass
-            finally:
-                if path and oldenv is not None:
-                    os.environ['PATH'] = oldenv
-        return None
-
-    if 'SPATIALINDEX_C_LIBRARY' in os.environ:
-        lib_path, lib_name = os.path.split(os.environ['SPATIALINDEX_C_LIBRARY'])
-        rt = _load_library(lib_name, ctypes.cdll.LoadLibrary, (lib_path,))
-    else:
-        rt = _load_library('spatialindex_c.dll', ctypes.cdll.LoadLibrary)
-    if not rt:
-        raise OSError("could not find or load spatialindex_c.dll")
-
+    os.environ['PATH'] = "{};{}".format(os.environ['PATH'], os.path.join(sys.prefix, "Library", "bin"))
+    rt = ctypes.CDLL("spatialindex_c-64.dll")
 elif os.name == 'posix':
-    if 'SPATIALINDEX_C_LIBRARY' in os.environ:
-        lib_name = os.environ['SPATIALINDEX_C_LIBRARY']
+    if 'linux' in sys.platform:
+        lib_name = 'libspatialindex_c.so'
+    elif 'darwin' in sys.platform:
+        lib_name = 'libspatialindex_c.dylib'
     else:
-        lib_name = find_library('spatialindex_c')
-
-    if lib_name is None:
-        raise OSError("Could not find libspatialindex_c library file")
-
-    rt = ctypes.CDLL(lib_name)
+        raise ValueError('Unexpected sys.platform "%s"' % sys.platform)
+    rt = ctypes.CDLL(os.path.join(sys.prefix, 'lib', lib_name))
 else:
     raise RTreeError('Unsupported OS "%s"' % os.name)
 