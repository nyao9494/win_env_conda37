From 6294578f2c6374ec92cde94821f7949b5f8c477b Mon Sep 17 00:00:00 2001
From: Friedemann Kleint <Friedemann.Kleint@qt.io>
Date: Wed, 29 Jan 2020 12:50:21 +0100
Subject: [PATCH] Fix Python 3.8 warnings about deprecated int conversions of enums/flags

Set Py_nb_index to the conversion method for flags and enums.

Fixes warnings like:
examples/widgets/widgets/tetrix.py:107: DeprecationWarning: an integer is required (got type PySide2.QtCore.Qt.AlignmentFlag).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.

Task-number: PYSIDE-168
Task-number: PYSIDE-939
Change-Id: Id41a72474192b357afd3dacd0a2e2fc5e055775c
Reviewed-by: Cristian Maureira-Fredes <cristian.maureira-fredes@qt.io>
---

diff --git a/sources/pyside2/libpyside/pysideqflags.cpp b/sources/pyside2/libpyside/pysideqflags.cpp
index 3335144..8cf9aa7 100644
--- a/sources/pyside2/libpyside/pysideqflags.cpp
+++ b/sources/pyside2/libpyside/pysideqflags.cpp
@@ -86,6 +86,11 @@
         return PyLong_AsLong(number);
     }
 
+    static PyObject *qflag_int(PyObject *self)
+    {
+        return PyLong_FromLong(reinterpret_cast<PySideQFlagsObject*>(self)->ob_value);
+    }
+
     PyObject *PySideQFlagsRichCompare(PyObject *self, PyObject *other, int op)
     {
         int result = 0;
@@ -146,7 +151,8 @@
         {Py_nb_and, 0},
         {Py_nb_xor, 0},
         {Py_nb_or, 0},
-        {Py_nb_int, 0},
+        {Py_nb_int, reinterpret_cast<void*>(qflag_int)},
+        {Py_nb_index, reinterpret_cast<void*>(qflag_int)},
 #ifndef IS_PY3K
         {Py_nb_long, 0},
 #endif
diff --git a/sources/shiboken2/generator/shiboken2/cppgenerator.cpp b/sources/shiboken2/generator/shiboken2/cppgenerator.cpp
index 7656570..8dbf999 100644
--- a/sources/shiboken2/generator/shiboken2/cppgenerator.cpp
+++ b/sources/shiboken2/generator/shiboken2/cppgenerator.cpp
@@ -4836,6 +4836,7 @@
     s << INDENT << "{Py_nb_xor,     (void *)" << cpythonName  << "___xor__}," << endl;
     s << INDENT << "{Py_nb_or,      (void *)" << cpythonName  << "___or__}," << endl;
     s << INDENT << "{Py_nb_int,     (void *)" << cpythonName << "_long}," << endl;
+    s << INDENT << "{Py_nb_index,   (void *)" << cpythonName << "_long}," << endl;
     s << "#ifndef IS_PY3K" << endl;
     s << INDENT << "{Py_nb_long,    (void *)" << cpythonName << "_long}," << endl;
     s << "#endif" << endl;
